(1)

Writing Clean Code

STYLE GUIDES: The What, the Why, and the How
You have now been writing code for a couple of weeks. It's important to introduce some standardization around 
how you write that code. We have included a style guide that we expect you to follow and use during the entire duration of your course.

Access the style guide here Download here.
[Style Guide](https://github.com/MasterOracleSentinel/Week_04--Introduction-to-JavaScript/blob/main/ES6-style-guide.html).




Let’s explore our JavaScript style guide now. 

Why is a style guide important for a team? 
A style guide can help you:

Standardize code across teams
Read others’ code quickly
Avoid syntax bugs
Avoid merge conflicts in GitHub when collaborating
Make fewer decisions while you are writing code: focus more on logic and less on syntax
Make your code more predictable and therefore easier to read and write
What is the best way to know the difference between good code and bad code?
The best way to know whether code is good or bad is a combination of your own experience writing code and seeing 
lots of examples of good code. When you write, you must adhere to strict styling standards in order to gain the muscle 
memory needed to continue these good habits. When looking at code, be sure to find examples that are well-written and clean. 
When you are just starting you may not know what that is, but rest assured that the examples of code in this course are clean, 
good examples, and you can start developing your own internal sense of what is good or bad.

You’ll notice that as time goes on, you’ll see code that “smells” or doesn’t feel quite right. While it usually doesn’t come 
down to a single thing, it often is a combination of inconsistently applied rules and conventions. 

Some additional rules for good, clean, JavaScript code are illustrated here Links to an external site.and here.Links to an external site.

Look over these articles. After you’re done, answer the question below:

What is that something small that you can start doing now, without any additional resources or anyone’s permission, to clean up your own code? 

 

Submission Instructions:

 

Word count: 50-100
You are encouraged to reply to your fellow learners to continue the conversation. What other "small things" did others come up with that 
you will also adopt? Let them know!

(2)

Explain A Basic Looping Function
----------------------------------


In this exercise, you are going to step through a function and explain, step by step, what happens when the function is called. 

For example, if you have the following function:

function addNumbers(num1, num2) {

  let result = num1 + num2; 

  console.log(result);

}; 

And you call it later as shown below: 

addNumbers(3, 4) 

>>7 

You could explain what’s happening as follows:

The function addNumbers  is called with two arguments, 3 and 4.
In the second line of the function, a variable called result is set with `let result =`, and points to a value of 3 and 4 added together.
The values of 3 and 4 were passed by reference into the function because they are primitive types. 
After that, on line 3, you run the command console.log and pass the variable ‘result’ as an argument.
The console then prints “7”, as that is the value that ‘result’ points to.
Then, the function finishes executing, and the variable ‘result’ goes out of existence, as it is a function-scoped variable. 
Now, explain what is happening, in your own words, when this function is called: 

 

function subtractNumbers(num1, num2) { 

  let result = num1-num2; 

  console.log(result);

};

subtractNumbers(10, 3) 

Submission Instructions:

 

Word count: 50-100
You are encouraged to reply to your peers to continue the conversation. What did you learn from their explanation?



(3)

Technical Challenge Reflection - PacMan Exercise


Think back to a technical challenge you faced this week while working on the PacMan exercise.  

What was challenging about it?
How did you work to overcome it?
What questions do you still have about that particular technical issue, or, what else you would like to learn about it?
Submission Instructions:

Word count: 50-150
You are encouraged to reply to your fellow learners to continue the conversation. Did you experience the same 
challenges as your peers? What did you learn from their posts?


(4)

GitHub Portfolio Project - Building Your Portfolio

As a junior developer, showcasing your work is a valuable way to break into the software development industry. Building a GitHub portfolio is an important asset as recruiters look to understand your coding experience. A good assortment of projects that are readily available to recruiters and hiring managers will work in your favor as they look to understand your coding abilities. 

Having a well-maintained GitHub portfolio enhances your resume and highlights your strengths as you embark on your software development journey. 

README files: 

Every repository you create should have a README file. This file contains useful information about your project. It is the first file GitHub will show when someone opens your repository. 

While there is no standard README file structure, this file usually includes information such as the following:

Name: The name of the project. This name should be a descriptive, specific name for your project and what it does.  
Description: A description of the project to let people know what the project is for. A list of features could also be added here as a sub-section. 
Installation: If needed, you could include steps to help people get started with your project.
Usage: You can include examples of how to use your project in this section and highlight the expected outcomes. 
Support: You can tell people where to go for help regarding your project (example: email, Twitter, etc.). 
Roadmap: This section could include any future fixes or improvements you might be planning for your project. 
License information: For open source projects, you can describe how they’re licensed.  
README files have the extension “.md” signifying “markdown”. Similar to HTML, it is a markup language that makes your file more presentable. You can review the markdown guide here Links to an external site.to learn more about the syntax. 

Here’s an example Links to an external site.of a well-formatted and well-maintained README file. 

Instructions:

In this activity, your task is to do the following: 

If you haven’t done so already, create a GitHub account. 
Add all projects you’ve worked on so far to your GitHub account as repositories (also known as “repos”). You can follow the steps highlighted here Links to an external site.to create a new repository.
For every repository created in your GitHub, add a README file that explains the purpose of the project and the work you’ve done or plan to do on it. 
Make a plan to check your projects into GitHub periodically and to keep everything well-organized. 
In this discussion, submit a link to one repository you created. The repository should include a well-formatted README file. Write a few sentences describing your repository in your discussion post. 
Look through your peers' posts to get more ideas on how to structure a README.
Keep in mind that the primary purpose of a portfolio of code is to showcase your programming ability and your understanding of fundamental concepts. During interviews, it can also serve as a catalyst to help navigate technical discussions with more depth. These are the conversations that make a good interview, and discussing familiar code (found in your repository) will be more comfortable than answering other, unanticipated, technical questions.

Your GitHub portfolio is only one way to showcase your skill-set to potential recruiters. But it can be a helpful tool to answer the question “Can you code?” by showing, instead of telling. 

Submission Instructions:

 

Word count: 50-100
You are encouraged to reply to your fellow learners to continue the conversation. What do you think of their coding project and README? Did you follow the steps for installation?


well put together read-me:
https://github.com/FortAwesome/Font-Awesome

markdown guide:
https://www.markdownguide.org/basic-syntax/



(5)

Q & A Discussion With Learning Facilitator

Do you have specific questions about a coding assignment? Did you encounter a bug that you are struggling to troubleshoot? 
This forum is the space to ask questions related to this week’s assignments and video content. It will be moderated by your 
Learning Facilitators.

We also encourage you to read through your classmate’s questions and

1) respond if you know the answer or

2) comment if you also have the same question that they posted.



(6)

